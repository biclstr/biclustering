#include "biclstr.h"

#define MAX_VNAME_LEN     30
#define MAX_INAME_LEN     30

#define vstrcpy( a, b ) \
(strcpy( a.arr, b ), a.len = strlen( a.arr ), a.arr)

#ifdef _WIN32
    /* This allows compilation on vs 2010 */ 
    #define _W64
#endif

static char *   USERID = NULL;
static char *   SQLSTMT = NULL;
static char *   ARRAY_SIZE = "10";
static char *   DB_NAME = NULL; //"biclstr";
static char *   DB_STRING = NULL; //"biclstr";
static char *   DB_USER = NULL; //"biclstr";
static char *   DB_PASS = NULL; //"Asdqwe123";

EXEC SQL INCLUDE sqlca;
EXEC SQL INCLUDE sqlda;

extern SQLDA *sqlald();
extern void   sqlclu();

static void die( char * msg )
{
    fprintf( stderr, "%s\n", msg );
    exit(1);
}

/*
    this array contains a default mapping
    I am using to constrain the
       lengths of returned columns.  It is mapping,
    for example, the Oracle
       NUMBER type (type code = 2) to be 45 characters
    long in a string.
*/

static int lengths[] =
{ -1, 0, 45, 0, 0, 0, 0, 0, 2000, 0, 0,
 18, 25, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 512, 2000 };


static void process_parms( argc, argv )
int    argc;
char *    argv[];
{
int    i;

    for( i = 1; i < argc; i++ )
    {
        if ( !strncmp( argv[i], "userid=", 7 ) )
              DB_USER = argv[i]+7;
        else
        if ( !strncmp( argv[i], "passwd=", 7 ) )
              DB_PASS = argv[i]+7;
        else
        if ( !strncmp( argv[i], "dbstring=", 9 ) )
              DB_STRING = argv[i]+9;
        else
        if ( !strncmp( argv[i], "arraysize=", 10 ) )
        {
			ARRAY_SIZE = argv[i]+10;
			iARRAY_SIZE = atoi(ARRAY_SIZE);
		}
        else
        {
            fprintf( stderr,
                    "usage: %s %s %s\n",
                     argv[0],
                    "userid=xxx passwd=yyy dbstring=zzz ",
                    "arraysize=<NN>\n" );
            exit(1);
        }
    }
    if ( DB_USER == NULL  || DB_PASS == NULL)
    {
        fprintf( stderr,
                "usage: %s %s %s\n",
                 argv[0],
				"userid=xxx passwd=yyy dbstring=zzz ",
                "arraysize=<NN>\n" );
        exit(1);
    }
}

static void sqlerror_hard()
{
    EXEC SQL WHENEVER SQLERROR CONTINUE;

    fprintf(stderr,"\nORACLE error detected:");
    fprintf(stderr,"\n% .70s \n", sqlca.sqlerrm.sqlerrmc);

    EXEC SQL ROLLBACK WORK RELEASE;
    exit(1);
}

static void prepare_tpivot(int prep_fpivot)
{
SQLDA *    select_dp;
int		   i;
int        j;
int		   k = 0;
int		   col = 0;
int		   row = 0;
int        null_ok;
int		   last_fetch_count;
int        row_count = 0;
short      ind_value;
char *     char_ptr;
int        precision;
int        scale;
int        size = 10;


	SQLSTMT = "select head from (select (select to_char(count(*)) from movies where movieid<10) head, 0 rk from dual union all select to_char(userid) , row_number() over (partition by 'x' order by userid) rk from users) where rownum<30 order by rk";
    fprintf( stderr, "Unloading header '%s'\n", SQLSTMT );

    EXEC SQL WHENEVER SQLERROR DO sqlerror_hard();
    EXEC SQL PREPARE S FROM :SQLSTMT;
    EXEC SQL DECLARE C CURSOR FOR S;


    if ((select_dp = sqlald(size,MAX_VNAME_LEN,MAX_INAME_LEN)) == NULL )
        die( "Cannot allocate  memory for select descriptor." );

	select_dp->N = size;
	fprintf(stderr, "\n N na poczatku wynosi %d \n", select_dp->F);
    EXEC SQL DESCRIBE SELECT LIST FOR S INTO select_dp;
    if (!select_dp->F) 
		return NULL;

		fprintf(stderr, "\n N potem wynosi %d \n", select_dp->F);

    if (select_dp->F < 0)
    {
        size = -select_dp->F;
        sqlclu(select_dp);
        if ((select_dp = sqlald (size, MAX_VNAME_LEN, MAX_INAME_LEN)) == NULL)
        die("Cannot allocate  memory for descriptor.");
        EXEC SQL DESCRIBE SELECT LIST FOR S INTO select_dp;
    }
    select_dp->N = select_dp->F;	
	for (i = 0; i < select_dp->N; i++)
		select_dp->I[i] = (short *) malloc(sizeof(short) * atoi(ARRAY_SIZE) );

	for (i = 0; i < select_dp->F; i++)
    {
        sqlnul (&(select_dp->T[i]),
                &(select_dp->T[i]), &null_ok);
		 if ( select_dp->T[i] < sizeof(lengths)/sizeof(lengths[0]) )
         {
            if ( lengths[select_dp->T[i]] )
                 select_dp->L[i]  = lengths[select_dp->T[i]];
            else select_dp->L[i] += 5;
        }
        else select_dp->L[i] += 5;

		select_dp->T[i] = 5;
		select_dp->V[i] = (char *) malloc(select_dp->L[i] * atoi(ARRAY_SIZE));

		for( j = MAX_VNAME_LEN-1; j > 0 && select_dp->S[i][j] == ' '; j--);
   }

	EXEC SQL OPEN C;

	tpivothead = (char **) malloc(sizeof(char *) * /*(29) */sqlca.sqlerrd[2]);
	k=0;

    for ( last_fetch_count = 0;;last_fetch_count = sqlca.sqlerrd[2] )
    {
        EXEC SQL FOR :iARRAY_SIZE FETCH C USING DESCRIPTOR select_dp;
		tpivothead = (char **) realloc(tpivothead, sizeof(char *) * sqlca.sqlerrd[2]);

		for( j=0; j < sqlca.sqlerrd[2]-last_fetch_count; j++ )
        {
			k=j+last_fetch_count;
			tpivothead[k] = (char *)malloc(sizeof(char) * (lengths[2]+1));

            for (i = 0; i < select_dp->F; i++)
            {
                ind_value = *(select_dp->I[i]+j);
                char_ptr  = select_dp->V[i] + (j*select_dp->L[i]);
				strncpy(tpivothead[k], char_ptr ,strlen(char_ptr));
				tpivothead[k][strlen(char_ptr)]='\0';
            }
            row_count++;
          //  printf( "\n" );
        }
        if ( sqlca.sqlcode > 0 ) break;
    }

	for (j=0; j<=k; j++)
		fprintf(stderr, "tpivothead[%d] to '%s'\n",j, tpivothead[j]);

    sqlclu(select_dp);

    EXEC SQL CLOSE C;

    EXEC SQL COMMIT WORK;
    fprintf( stderr, "%d rows extracted\n", row_count );


// ------------------------------ UNLOADING DATA --------------------------- //
	
	cols=row_count-1;
	rows=atoi(tpivothead[0]);
	row_count = 0;


	SQLSTMT = "select m.movieid, u.userid, r.rating from (select * from users where userid<29) /*users*/ u cross join (select * from movies where movieid<10) /*movies*/ m left join ratings r on u.userid=r.userid and m.movieid=r.movieid order by 2, 1"; 

	fprintf( stderr, "Unloading data '%s'\n", SQLSTMT );

	fprintf(stderr, "\n cols %d	rows %d \n", cols, rows);
	EXEC SQL WHENEVER SQLERROR DO sqlerror_hard();
    EXEC SQL PREPARE S FROM :SQLSTMT;
    EXEC SQL DECLARE T CURSOR FOR S;
	
    if ((select_dp = sqlald(size,MAX_VNAME_LEN,MAX_INAME_LEN)) == NULL )
        die( "Cannot allocate  memory for select descriptor." );

	select_dp->N = size;
	fprintf(stderr, "\n N wynosi %d \n", select_dp->N);
    EXEC SQL DESCRIBE SELECT LIST FOR S INTO select_dp;
    if (!select_dp->F) 
		return NULL;

    if (select_dp->F < 0)
    {
        size = -select_dp->F;
        sqlclu(select_dp);
        if ((select_dp = sqlald (size, MAX_VNAME_LEN, MAX_INAME_LEN)) == NULL)
        die("Cannot allocate  memory for descriptor.");
        EXEC SQL DESCRIBE SELECT LIST FOR S INTO select_dp;
    }
    select_dp->N = select_dp->F;	
	for (i = 0; i < select_dp->N; i++)
		select_dp->I[i] = (short *) malloc(sizeof(short) * atoi(ARRAY_SIZE) );

	for (i = 0; i < select_dp->F; i++)
    {
        sqlnul (&(select_dp->T[i]),
                &(select_dp->T[i]), &null_ok);
		 if ( select_dp->T[i] < sizeof(lengths)/sizeof(lengths[0]) )
         {
            if ( lengths[select_dp->T[i]] )
                 select_dp->L[i]  = lengths[select_dp->T[i]];
            else select_dp->L[i] += 5;
        }
        else select_dp->L[i] += 5;

		select_dp->T[i] = 5;
		select_dp->V[i] = (char *) malloc(select_dp->L[i] * atoi(ARRAY_SIZE));

		for( j = MAX_VNAME_LEN-1; j > 0 && select_dp->S[i][j] == ' '; j--);
   }

	EXEC SQL OPEN T;

	tpivot = (int **) malloc(sizeof(int *) * /* sqlca.sqlerrd[2]*/ cols );
	for (i=0; i<cols; i++)
		tpivot[i]= (int *) malloc(sizeof(int *) * rows );

	k=0;
    for ( last_fetch_count = 0;;last_fetch_count = sqlca.sqlerrd[2] )
    {
        EXEC SQL FOR :iARRAY_SIZE FETCH T USING DESCRIPTOR select_dp;

		for( j=0; j < sqlca.sqlerrd[2]-last_fetch_count; j++ )
        {
			k=j+last_fetch_count;

            for (i = 0; i < select_dp->F; i++)
            {
                ind_value = *(select_dp->I[i]+j);
                char_ptr  = select_dp->V[i] + (j*select_dp->L[i]);
            }
            row_count++;

			tpivot[col][row]=atoi(char_ptr);
			fprintf(stderr, "\n row=%d	col=%d	 tpivot[%d][%d]=%d",row, col, row, col, tpivot[col][row]);
			
			row++;
			if ((row) % rows == 0)
			{
				col++;
				row=0;
			}
        }
        if ( sqlca.sqlcode > 0 ) break;
    }

    sqlclu(select_dp);

    EXEC SQL CLOSE T;

    EXEC SQL COMMIT WORK;
}



main( argc, argv )
int    argc;
char *    argv[];
{

EXEC SQL BEGIN DECLARE SECTION;
//VARCHAR  db_name[15];
VARCHAR  db_string[15];
VARCHAR  db_user[15];
VARCHAR  db_pass[15];
//VARCHAR   oracleid[50];
EXEC SQL END DECLARE SECTION;
SQLDA    * select_dp;


    process_parms( argc, argv );

	fpivot = fopen("fpivot.txt","w+");

    /* Connect to ORACLE. */
	vstrcpy( db_string, DB_STRING);
	vstrcpy( db_user, DB_USER);
	vstrcpy( db_pass, DB_PASS);

    EXEC SQL WHENEVER SQLERROR DO sqlerror_hard();

	EXEC SQL CONNECT :db_user IDENTIFIED BY :db_pass; // USING :db_string; 

	fprintf(stderr, "\nConnected to ORACLE as user: %s\n\n",DB_USER);

    EXEC SQL ALTER SESSION
    SET NLS_DATE_FORMAT = 'YYYY-MM-DD HH24:MI:SS';


	prepare_tpivot(1);


    /* Disconnect from ORACLE. */
    EXEC SQL COMMIT WORK RELEASE;

	fclose(fpivot);

    exit(0);
}

